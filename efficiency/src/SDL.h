// -*- C++ -*-
#ifndef SDL_H
#define SDL_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector>
#include <unistd.h>
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with file: /home/users/bsathian/SDL/TrackLooper_central_take3/TrackLooper/debug.root

using namespace std;
class SDL {
private:
protected:
  unsigned int index;
  int pT5_occupancies_;
  TBranch *pT5_occupancies_branch;
  bool pT5_occupancies_isLoaded;
  vector<float> *t3_phi_;
  TBranch *t3_phi_branch;
  bool t3_phi_isLoaded;
  vector<float> *t4_zLoPointed_;
  TBranch *t4_zLoPointed_branch;
  bool t4_zLoPointed_isLoaded;
  vector<float> *t4_kZ_;
  TBranch *t4_kZ_branch;
  bool t4_kZ_isLoaded;
  vector<int> *t3_isDuplicate_;
  TBranch *t3_isDuplicate_branch;
  bool t3_isDuplicate_isLoaded;
  vector<int> *sim_event_;
  TBranch *sim_event_branch;
  bool sim_event_isLoaded;
  vector<float> *t4_zOut_;
  TBranch *t4_zOut_branch;
  bool t4_zOut_isLoaded;
  vector<int> *sim_q_;
  TBranch *sim_q_branch;
  bool sim_q_isLoaded;
  vector<float> *t3_rtHi_;
  TBranch *t3_rtHi_branch;
  bool t3_rtHi_isLoaded;
  vector<float> *sim_eta_;
  TBranch *sim_eta_branch;
  bool sim_eta_isLoaded;
  vector<float> *pT4_betaOut_;
  TBranch *pT4_betaOut_branch;
  bool pT4_betaOut_isLoaded;
  vector<float> *pT4_zLo_;
  TBranch *pT4_zLo_branch;
  bool pT4_zLo_isLoaded;
  vector<float> *t5_eta_;
  TBranch *t5_eta_branch;
  bool t5_eta_isLoaded;
  vector<int> *sim_denom_;
  TBranch *sim_denom_branch;
  bool sim_denom_isLoaded;
  vector<float> *pLS_phi_;
  TBranch *pLS_phi_branch;
  bool pLS_phi_isLoaded;
  vector<int> *t3_layer3_;
  TBranch *t3_layer3_branch;
  bool t3_layer3_isLoaded;
  vector<int> *pT3_isDuplicate_;
  TBranch *pT3_isDuplicate_branch;
  bool pT3_isDuplicate_isLoaded;
  vector<int> *tc_isDuplicate_;
  TBranch *tc_isDuplicate_branch;
  bool tc_isDuplicate_isLoaded;
  vector<float> *t4_deltaPhiPos_;
  TBranch *t4_deltaPhiPos_branch;
  bool t4_deltaPhiPos_isLoaded;
  vector<float> *pT5_rzChiSquared_;
  TBranch *pT5_rzChiSquared_branch;
  bool pT5_rzChiSquared_isLoaded;
  vector<float> *pT5_eta_;
  TBranch *pT5_eta_branch;
  bool pT5_eta_isLoaded;
  vector<int> *sim_pT3_matched_;
  TBranch *sim_pT3_matched_branch;
  bool sim_pT3_matched_isLoaded;
  vector<vector<float> > *pT3_matched_pt_;
  TBranch *pT3_matched_pt_branch;
  bool pT3_matched_pt_isLoaded;
  vector<float> *t3_zHiPointed_;
  TBranch *t3_zHiPointed_branch;
  bool t3_zHiPointed_isLoaded;
  vector<float> *t4_betaOut_;
  TBranch *t4_betaOut_branch;
  bool t4_betaOut_isLoaded;
  vector<int> *t4_isDuplicate_;
  TBranch *t4_isDuplicate_branch;
  bool t4_isDuplicate_isLoaded;
  vector<float> *t4_betaOutCut_;
  TBranch *t4_betaOutCut_branch;
  bool t4_betaOutCut_isLoaded;
  vector<float> *t3_betaOut_;
  TBranch *t3_betaOut_branch;
  bool t3_betaOut_isLoaded;
  vector<float> *t3_sdlCut_;
  TBranch *t3_sdlCut_branch;
  bool t3_sdlCut_isLoaded;
  vector<float> *pT4_rtOut_;
  TBranch *pT4_rtOut_branch;
  bool pT4_rtOut_isLoaded;
  vector<float> *t3_betaInCut_;
  TBranch *t3_betaInCut_branch;
  bool t3_betaInCut_isLoaded;
  vector<float> *pT4_betaOutCut_;
  TBranch *pT4_betaOutCut_branch;
  bool pT4_betaOutCut_isLoaded;
  vector<float> *pT4_betaInCut_;
  TBranch *pT4_betaInCut_branch;
  bool pT4_betaInCut_isLoaded;
  vector<float> *pT3_pixelRadius_;
  TBranch *pT3_pixelRadius_branch;
  bool pT3_pixelRadius_isLoaded;
  vector<float> *sim_pt_;
  TBranch *sim_pt_branch;
  bool sim_pt_isLoaded;
  vector<float> *pT5_matched_pt_;
  TBranch *pT5_matched_pt_branch;
  bool pT5_matched_pt_isLoaded;
  vector<float> *pT4_deltaPhi_;
  TBranch *pT4_deltaPhi_branch;
  bool pT4_deltaPhi_isLoaded;
  vector<float> *t3_zLoPointed_;
  TBranch *t3_zLoPointed_branch;
  bool t3_zLoPointed_isLoaded;
  vector<float> *pLS_eta_;
  TBranch *pLS_eta_branch;
  bool pLS_eta_isLoaded;
  vector<float> *t3_deltaBetaCut_;
  TBranch *t3_deltaBetaCut_branch;
  bool t3_deltaBetaCut_isLoaded;
  vector<int> *t3_moduleType_binary_;
  TBranch *t3_moduleType_binary_branch;
  bool t3_moduleType_binary_isLoaded;
  vector<int> *sim_pdgId_;
  TBranch *sim_pdgId_branch;
  bool sim_pdgId_isLoaded;
  vector<float> *t3_eta_;
  TBranch *t3_eta_branch;
  bool t3_eta_isLoaded;
  vector<float> *t5_bridgeRadiusMax2S_;
  TBranch *t5_bridgeRadiusMax2S_branch;
  bool t5_bridgeRadiusMax2S_isLoaded;
  vector<float> *t5_outerRadiusMax2S_;
  TBranch *t5_outerRadiusMax2S_branch;
  bool t5_outerRadiusMax2S_isLoaded;
  vector<int> *t4_occupancies_;
  TBranch *t4_occupancies_branch;
  bool t4_occupancies_isLoaded;
  vector<int> *t5_layer_binary_;
  TBranch *t5_layer_binary_branch;
  bool t5_layer_binary_isLoaded;
  vector<vector<int> > *sim_tcIdx_;
  TBranch *sim_tcIdx_branch;
  bool sim_tcIdx_isLoaded;
  vector<int> *pT4_layer_binary_;
  TBranch *pT4_layer_binary_branch;
  bool pT4_layer_binary_isLoaded;
  vector<int> *pT3_layer_binary_;
  TBranch *pT3_layer_binary_branch;
  bool pT3_layer_binary_isLoaded;
  vector<int> *pT3_pix_idx3_;
  TBranch *pT3_pix_idx3_branch;
  bool pT3_pix_idx3_isLoaded;
  vector<int> *pT3_pix_idx2_;
  TBranch *pT3_pix_idx2_branch;
  bool pT3_pix_idx2_isLoaded;
  vector<int> *pT3_pix_idx1_;
  TBranch *pT3_pix_idx1_branch;
  bool pT3_pix_idx1_isLoaded;
  vector<float> *t5_bridgeRadiusMax_;
  TBranch *t5_bridgeRadiusMax_branch;
  bool t5_bridgeRadiusMax_isLoaded;
  vector<float> *t5_bridgeRadiusMin2S_;
  TBranch *t5_bridgeRadiusMin2S_branch;
  bool t5_bridgeRadiusMin2S_isLoaded;
  vector<int> *module_subdets_;
  TBranch *module_subdets_branch;
  bool module_subdets_isLoaded;
  vector<float> *pT3_tripletRadius_;
  TBranch *pT3_tripletRadius_branch;
  bool pT3_tripletRadius_isLoaded;
  vector<float> *pT4_zLoPointed_;
  TBranch *pT4_zLoPointed_branch;
  bool pT4_zLoPointed_isLoaded;
  vector<int> *t3_hit_idx4_;
  TBranch *t3_hit_idx4_branch;
  bool t3_hit_idx4_isLoaded;
  vector<int> *t3_hit_idx5_;
  TBranch *t3_hit_idx5_branch;
  bool t3_hit_idx5_isLoaded;
  vector<int> *t3_hit_idx6_;
  TBranch *t3_hit_idx6_branch;
  bool t3_hit_idx6_isLoaded;
  vector<float> *t3_rtOut_;
  TBranch *t3_rtOut_branch;
  bool t3_rtOut_isLoaded;
  vector<int> *t3_hit_idx1_;
  TBranch *t3_hit_idx1_branch;
  bool t3_hit_idx1_isLoaded;
  vector<int> *t3_hit_idx2_;
  TBranch *t3_hit_idx2_branch;
  bool t3_hit_idx2_isLoaded;
  vector<int> *t3_hit_idx3_;
  TBranch *t3_hit_idx3_branch;
  bool t3_hit_idx3_isLoaded;
  vector<int> *t3_isFake_;
  TBranch *t3_isFake_branch;
  bool t3_isFake_isLoaded;
  vector<int> *t5_isFake_;
  TBranch *t5_isFake_branch;
  bool t5_isFake_isLoaded;
  vector<float> *t5_bridgeRadiusMin_;
  TBranch *t5_bridgeRadiusMin_branch;
  bool t5_bridgeRadiusMin_isLoaded;
  vector<float> *t4_zLo_;
  TBranch *t4_zLo_branch;
  bool t4_zLo_isLoaded;
  vector<int> *md_occupancies_;
  TBranch *md_occupancies_branch;
  bool md_occupancies_isLoaded;
  vector<int> *t3_layer_binary_;
  TBranch *t3_layer_binary_branch;
  bool t3_layer_binary_isLoaded;
  vector<int> *t4_layer_binary_;
  TBranch *t4_layer_binary_branch;
  bool t4_layer_binary_isLoaded;
  vector<vector<int> > *sim_pT3_types_;
  TBranch *sim_pT3_types_branch;
  bool sim_pT3_types_isLoaded;
  vector<float> *t4_phi_;
  TBranch *t4_phi_branch;
  bool t4_phi_isLoaded;
  vector<float> *t5_phi_;
  TBranch *t5_phi_branch;
  bool t5_phi_isLoaded;
  vector<int> *t4_isFake_;
  TBranch *t4_isFake_branch;
  bool t4_isFake_isLoaded;
  vector<float> *t4_deltaPhi_;
  TBranch *t4_deltaPhi_branch;
  bool t4_deltaPhi_isLoaded;
  vector<float> *t4_rtLo_;
  TBranch *t4_rtLo_branch;
  bool t4_rtLo_isLoaded;
  vector<float> *t5_outerRadius_;
  TBranch *t5_outerRadius_branch;
  bool t5_outerRadius_isLoaded;
  vector<float> *pT5_phi_;
  TBranch *pT5_phi_branch;
  bool pT5_phi_isLoaded;
  vector<float> *t4_betaIn_;
  TBranch *t4_betaIn_branch;
  bool t4_betaIn_isLoaded;
  vector<int> *tc_isFake_;
  TBranch *tc_isFake_branch;
  bool tc_isFake_isLoaded;
  vector<float> *t3_zOut_;
  TBranch *t3_zOut_branch;
  bool t3_zOut_isLoaded;
  vector<float> *t5_outerRadiusMax_;
  TBranch *t5_outerRadiusMax_branch;
  bool t5_outerRadiusMax_isLoaded;
  vector<int> *pT3_isFake_;
  TBranch *pT3_isFake_branch;
  bool pT3_isFake_isLoaded;
  vector<vector<int> > *sim_pLS_types_;
  TBranch *sim_pLS_types_branch;
  bool sim_pLS_types_isLoaded;
  vector<float> *t3_deltaBeta_;
  TBranch *t3_deltaBeta_branch;
  bool t3_deltaBeta_isLoaded;
  vector<float> *sim_pca_dxy_;
  TBranch *sim_pca_dxy_branch;
  bool sim_pca_dxy_isLoaded;
  vector<float> *t5_outerRadiusMin_;
  TBranch *t5_outerRadiusMin_branch;
  bool t5_outerRadiusMin_isLoaded;
  vector<float> *pT4_phi_;
  TBranch *pT4_phi_branch;
  bool pT4_phi_isLoaded;
  vector<float> *t3_rtLo_;
  TBranch *t3_rtLo_branch;
  bool t3_rtLo_isLoaded;
  vector<float> *t3_betaOutCut_;
  TBranch *t3_betaOutCut_branch;
  bool t3_betaOutCut_isLoaded;
  vector<int> *pT5_isDuplicate_;
  TBranch *pT5_isDuplicate_branch;
  bool pT5_isDuplicate_isLoaded;
  vector<float> *pT4_zHi_;
  TBranch *pT4_zHi_branch;
  bool pT4_zHi_isLoaded;
  vector<int> *t5_moduleType_binary_;
  TBranch *t5_moduleType_binary_branch;
  bool t5_moduleType_binary_isLoaded;
  vector<float> *t3_residual_;
  TBranch *t3_residual_branch;
  bool t3_residual_isLoaded;
  vector<int> *t3_occupancies_;
  TBranch *t3_occupancies_branch;
  bool t3_occupancies_isLoaded;
  vector<vector<int> > *sim_pT4_types_;
  TBranch *sim_pT4_types_branch;
  bool sim_pT4_types_isLoaded;
  vector<float> *t4_deltaBetaCut_;
  TBranch *t4_deltaBetaCut_branch;
  bool t4_deltaBetaCut_isLoaded;
  vector<float> *t5_pt_;
  TBranch *t5_pt_branch;
  bool t5_pt_isLoaded;
  vector<float> *sim_len_;
  TBranch *sim_len_branch;
  bool sim_len_isLoaded;
  vector<float> *sim_lengap_;
  TBranch *sim_lengap_branch;
  bool sim_lengap_isLoaded;
  vector<float> *sim_hits_;
  TBranch *sim_hits_branch;
  bool sim_hits_isLoaded;
  vector<float> *simvtx_x_;
  TBranch *simvtx_x_branch;
  bool simvtx_x_isLoaded;
  vector<float> *simvtx_y_;
  TBranch *simvtx_y_branch;
  bool simvtx_y_isLoaded;
  vector<float> *simvtx_z_;
  TBranch *simvtx_z_branch;
  bool simvtx_z_isLoaded;
  vector<int> *sim_T4_matched_;
  TBranch *sim_T4_matched_branch;
  bool sim_T4_matched_isLoaded;
  vector<float> *t4_rtOut_;
  TBranch *t4_rtOut_branch;
  bool t4_rtOut_isLoaded;
  vector<float> *pT3_pt_;
  TBranch *pT3_pt_branch;
  bool pT3_pt_isLoaded;
  vector<float> *tc_pt_;
  TBranch *tc_pt_branch;
  bool tc_pt_isLoaded;
  vector<float> *pT3_pixelRadiusError_;
  TBranch *pT3_pixelRadiusError_branch;
  bool pT3_pixelRadiusError_isLoaded;
  vector<int> *pT5_isFake_;
  TBranch *pT5_isFake_branch;
  bool pT5_isFake_isLoaded;
  vector<float> *pT5_pt_;
  TBranch *pT5_pt_branch;
  bool pT5_pt_isLoaded;
  vector<float> *pT4_deltaBeta_;
  TBranch *pT4_deltaBeta_branch;
  bool pT4_deltaBeta_isLoaded;
  vector<float> *t5_innerRadiusMax_;
  TBranch *t5_innerRadiusMax_branch;
  bool t5_innerRadiusMax_isLoaded;
  vector<float> *sim_phi_;
  TBranch *sim_phi_branch;
  bool sim_phi_isLoaded;
  vector<float> *t4_betaInCut_;
  TBranch *t4_betaInCut_branch;
  bool t4_betaInCut_isLoaded;
  vector<float> *t5_innerRadiusMin_;
  TBranch *t5_innerRadiusMin_branch;
  bool t5_innerRadiusMin_isLoaded;
  vector<float> *pT4_sdlCut_;
  TBranch *pT4_sdlCut_branch;
  bool pT4_sdlCut_isLoaded;
  vector<int> *pT3_hit_idx3_;
  TBranch *pT3_hit_idx3_branch;
  bool pT3_hit_idx3_isLoaded;
  vector<float> *pT4_zHiPointed_;
  TBranch *pT4_zHiPointed_branch;
  bool pT4_zHiPointed_isLoaded;
  vector<int> *pT3_hit_idx1_;
  TBranch *pT3_hit_idx1_branch;
  bool pT3_hit_idx1_isLoaded;
  vector<float> *sim_pca_dz_;
  TBranch *sim_pca_dz_branch;
  bool sim_pca_dz_isLoaded;
  vector<float> *t4_deltaBeta_;
  TBranch *t4_deltaBeta_branch;
  bool t4_deltaBeta_isLoaded;
  vector<int> *pT3_hit_idx5_;
  TBranch *pT3_hit_idx5_branch;
  bool pT3_hit_idx5_isLoaded;
  vector<int> *pT3_hit_idx4_;
  TBranch *pT3_hit_idx4_branch;
  bool pT3_hit_idx4_isLoaded;
  vector<int> *pT5_layer_binary_;
  TBranch *pT5_layer_binary_branch;
  bool pT5_layer_binary_isLoaded;
  vector<float> *t5_bridgeRadius_;
  TBranch *t5_bridgeRadius_branch;
  bool t5_bridgeRadius_isLoaded;
  vector<int> *sim_pLS_matched_;
  TBranch *sim_pLS_matched_branch;
  bool sim_pLS_matched_isLoaded;
  vector<int> *pT4_isFake_;
  TBranch *pT4_isFake_branch;
  bool pT4_isFake_isLoaded;
  vector<int> *sim_T3_matched_;
  TBranch *sim_T3_matched_branch;
  bool sim_T3_matched_isLoaded;
  vector<float> *t3_deltaPhiPos_;
  TBranch *t3_deltaPhiPos_branch;
  bool t3_deltaPhiPos_isLoaded;
  vector<float> *pT3_phi_;
  TBranch *pT3_phi_branch;
  bool pT3_phi_isLoaded;
  vector<vector<float> > *t5_matched_pt_;
  TBranch *t5_matched_pt_branch;
  bool t5_matched_pt_isLoaded;
  vector<float> *pT3_eta_;
  TBranch *pT3_eta_branch;
  bool pT3_eta_isLoaded;
  vector<float> *t4_eta_;
  TBranch *t4_eta_branch;
  bool t4_eta_isLoaded;
  vector<float> *t3_deltaPhi_;
  TBranch *t3_deltaPhi_branch;
  bool t3_deltaPhi_isLoaded;
  vector<int> *pLS_isFake_;
  TBranch *pLS_isFake_branch;
  bool pLS_isFake_isLoaded;
  vector<float> *pT4_betaIn_;
  TBranch *pT4_betaIn_branch;
  bool pT4_betaIn_isLoaded;
  vector<int> *sim_bunchCrossing_;
  TBranch *sim_bunchCrossing_branch;
  bool sim_bunchCrossing_isLoaded;
  vector<float> *pT4_zOut_;
  TBranch *pT4_zOut_branch;
  bool pT4_zOut_isLoaded;
  vector<float> *pT4_deltaPhiPos_;
  TBranch *pT4_deltaPhiPos_branch;
  bool pT4_deltaPhiPos_isLoaded;
  vector<int> *sim_parentVtxIdx_;
  TBranch *sim_parentVtxIdx_branch;
  bool sim_parentVtxIdx_isLoaded;
  vector<float> *t3_zHi_;
  TBranch *t3_zHi_branch;
  bool t3_zHi_isLoaded;
  vector<int> *sim_pT4_matched_;
  TBranch *sim_pT4_matched_branch;
  bool sim_pT4_matched_isLoaded;
  vector<float> *t5_innerRadiusMin2S_;
  TBranch *t5_innerRadiusMin2S_branch;
  bool t5_innerRadiusMin2S_isLoaded;
  vector<float> *tc_eta_;
  TBranch *tc_eta_branch;
  bool tc_eta_isLoaded;
  vector<float> *tc_phi_;
  TBranch *tc_phi_branch;
  bool tc_phi_isLoaded;
  vector<int> *sim_T5_matched_;
  TBranch *sim_T5_matched_branch;
  bool sim_T5_matched_isLoaded;
  vector<vector<int> > *sim_T5_types_;
  TBranch *sim_T5_types_branch;
  bool sim_T5_types_isLoaded;
  vector<int> *t5_isDuplicate_;
  TBranch *t5_isDuplicate_branch;
  bool t5_isDuplicate_isLoaded;
  vector<float> *t4_zHiPointed_;
  TBranch *t4_zHiPointed_branch;
  bool t4_zHiPointed_isLoaded;
  vector<float> *pT4_rtHi_;
  TBranch *pT4_rtHi_branch;
  bool pT4_rtHi_isLoaded;
  vector<float> *t5_outerRadiusMin2S_;
  TBranch *t5_outerRadiusMin2S_branch;
  bool t5_outerRadiusMin2S_isLoaded;
  vector<float> *t3_betaIn_;
  TBranch *t3_betaIn_branch;
  bool t3_betaIn_isLoaded;
  int pT3_occupancies_;
  TBranch *pT3_occupancies_branch;
  bool pT3_occupancies_isLoaded;
  int *tc_occupancies_;
  TBranch *tc_occupancies_branch;
  bool tc_occupancies_isLoaded;
  vector<float> *t5_innerRadius_;
  TBranch *t5_innerRadius_branch;
  bool t5_innerRadius_isLoaded;
  vector<int> *sim_TC_matched_;
  TBranch *sim_TC_matched_branch;
  bool sim_TC_matched_isLoaded;
  vector<int> *pLS_isDuplicate_;
  TBranch *pLS_isDuplicate_branch;
  bool pLS_isDuplicate_isLoaded;
  vector<int> *t5_occupancies_;
  TBranch *t5_occupancies_branch;
  bool t5_occupancies_isLoaded;
  vector<int> *t3_layer1_;
  TBranch *t3_layer1_branch;
  bool t3_layer1_isLoaded;
  vector<float> *pT4_kZ_;
  TBranch *pT4_kZ_branch;
  bool pT4_kZ_isLoaded;
  vector<int> *pT3_hit_idx2_;
  TBranch *pT3_hit_idx2_branch;
  bool pT3_hit_idx2_isLoaded;
  vector<float> *pLS_pt_;
  TBranch *pLS_pt_branch;
  bool pLS_pt_isLoaded;
  vector<vector<int> > *sim_T4_types_;
  TBranch *sim_T4_types_branch;
  bool sim_T4_types_isLoaded;
  vector<int> *pT4_isDuplicate_;
  TBranch *pT4_isDuplicate_branch;
  bool pT4_isDuplicate_isLoaded;
  vector<float> *t4_pt_;
  TBranch *t4_pt_branch;
  bool t4_pt_isLoaded;
  vector<float> *t4_zHi_;
  TBranch *t4_zHi_branch;
  bool t4_zHi_isLoaded;
  vector<vector<int> > *sim_TC_types_;
  TBranch *sim_TC_types_branch;
  bool sim_TC_types_isLoaded;
  vector<float> *t3_kZ_;
  TBranch *t3_kZ_branch;
  bool t3_kZ_isLoaded;
  vector<int> *t4_moduleType_binary_;
  TBranch *t4_moduleType_binary_branch;
  bool t4_moduleType_binary_isLoaded;
  vector<int> *sg_occupancies_;
  TBranch *sg_occupancies_branch;
  bool sg_occupancies_isLoaded;
  vector<float> *pT4_pt_;
  TBranch *pT4_pt_branch;
  bool pT4_pt_isLoaded;
  vector<int> *pT3_hit_idx6_;
  TBranch *pT3_hit_idx6_branch;
  bool pT3_hit_idx6_isLoaded;
  vector<int> *pT3_pix_idx4_;
  TBranch *pT3_pix_idx4_branch;
  bool pT3_pix_idx4_isLoaded;
  vector<float> *sim_vx_;
  TBranch *sim_vx_branch;
  bool sim_vx_isLoaded;
  vector<float> *sim_vy_;
  TBranch *sim_vy_branch;
  bool sim_vy_isLoaded;
  vector<float> *sim_vz_;
  TBranch *sim_vz_branch;
  bool sim_vz_isLoaded;
  vector<float> *t4_sdlCut_;
  TBranch *t4_sdlCut_branch;
  bool t4_sdlCut_isLoaded;
  vector<float> *pT4_rtLo_;
  TBranch *pT4_rtLo_branch;
  bool pT4_rtLo_isLoaded;
  vector<float> *t5_innerRadiusMax2S_;
  TBranch *t5_innerRadiusMax2S_branch;
  bool t5_innerRadiusMax2S_isLoaded;
  vector<float> *t3_pt_;
  TBranch *t3_pt_branch;
  bool t3_pt_isLoaded;
  vector<int> *module_rings_;
  TBranch *module_rings_branch;
  bool module_rings_isLoaded;
  vector<float> *t3_zLo_;
  TBranch *t3_zLo_branch;
  bool t3_zLo_isLoaded;
  vector<float> *pT4_deltaBetaCut_;
  TBranch *pT4_deltaBetaCut_branch;
  bool pT4_deltaBetaCut_isLoaded;
  vector<float> *t4_rtHi_;
  TBranch *t4_rtHi_branch;
  bool t4_rtHi_isLoaded;
  vector<int> *t3_layer2_;
  TBranch *t3_layer2_branch;
  bool t3_layer2_isLoaded;
  vector<vector<int> > *sim_T3_types_;
  TBranch *sim_T3_types_branch;
  bool sim_T3_types_isLoaded;
  vector<vector<int> > *sim_pT5_types_;
  TBranch *sim_pT5_types_branch;
  bool sim_pT5_types_isLoaded;
  vector<int> *sim_pT5_matched_;
  TBranch *sim_pT5_matched_branch;
  bool sim_pT5_matched_isLoaded;
  vector<int> *module_layers_;
  TBranch *module_layers_branch;
  bool module_layers_isLoaded;
  vector<float> *pT4_eta_;
  TBranch *pT4_eta_branch;
  bool pT4_eta_isLoaded;
public:
  void Init(TTree *tree);
  void GetEntry(unsigned int idx);
  void LoadAllBranches();
  const int &pT5_occupancies();
  const vector<float> &t3_phi();
  const vector<float> &t4_zLoPointed();
  const vector<float> &t4_kZ();
  const vector<int> &t3_isDuplicate();
  const vector<int> &sim_event();
  const vector<float> &t4_zOut();
  const vector<int> &sim_q();
  const vector<float> &t3_rtHi();
  const vector<float> &sim_eta();
  const vector<float> &pT4_betaOut();
  const vector<float> &pT4_zLo();
  const vector<float> &t5_eta();
  const vector<int> &sim_denom();
  const vector<float> &pLS_phi();
  const vector<int> &t3_layer3();
  const vector<int> &pT3_isDuplicate();
  const vector<int> &tc_isDuplicate();
  const vector<float> &t4_deltaPhiPos();
  const vector<float> &pT5_rzChiSquared();
  const vector<float> &pT5_eta();
  const vector<int> &sim_pT3_matched();
  const vector<vector<float> > &pT3_matched_pt();
  const vector<float> &t3_zHiPointed();
  const vector<float> &t4_betaOut();
  const vector<int> &t4_isDuplicate();
  const vector<float> &t4_betaOutCut();
  const vector<float> &t3_betaOut();
  const vector<float> &t3_sdlCut();
  const vector<float> &pT4_rtOut();
  const vector<float> &t3_betaInCut();
  const vector<float> &pT4_betaOutCut();
  const vector<float> &pT4_betaInCut();
  const vector<float> &pT3_pixelRadius();
  const vector<float> &sim_pt();
  const vector<float> &pT5_matched_pt();
  const vector<float> &pT4_deltaPhi();
  const vector<float> &t3_zLoPointed();
  const vector<float> &pLS_eta();
  const vector<float> &t3_deltaBetaCut();
  const vector<int> &t3_moduleType_binary();
  const vector<int> &sim_pdgId();
  const vector<float> &t3_eta();
  const vector<float> &t5_bridgeRadiusMax2S();
  const vector<float> &t5_outerRadiusMax2S();
  const vector<int> &t4_occupancies();
  const vector<int> &t5_layer_binary();
  const vector<vector<int> > &sim_tcIdx();
  const vector<int> &pT4_layer_binary();
  const vector<int> &pT3_layer_binary();
  const vector<int> &pT3_pix_idx3();
  const vector<int> &pT3_pix_idx2();
  const vector<int> &pT3_pix_idx1();
  const vector<float> &t5_bridgeRadiusMax();
  const vector<float> &t5_bridgeRadiusMin2S();
  const vector<int> &module_subdets();
  const vector<float> &pT3_tripletRadius();
  const vector<float> &pT4_zLoPointed();
  const vector<int> &t3_hit_idx4();
  const vector<int> &t3_hit_idx5();
  const vector<int> &t3_hit_idx6();
  const vector<float> &t3_rtOut();
  const vector<int> &t3_hit_idx1();
  const vector<int> &t3_hit_idx2();
  const vector<int> &t3_hit_idx3();
  const vector<int> &t3_isFake();
  const vector<int> &t5_isFake();
  const vector<float> &t5_bridgeRadiusMin();
  const vector<float> &t4_zLo();
  const vector<int> &md_occupancies();
  const vector<int> &t3_layer_binary();
  const vector<int> &t4_layer_binary();
  const vector<vector<int> > &sim_pT3_types();
  const vector<float> &t4_phi();
  const vector<float> &t5_phi();
  const vector<int> &t4_isFake();
  const vector<float> &t4_deltaPhi();
  const vector<float> &t4_rtLo();
  const vector<float> &t5_outerRadius();
  const vector<float> &pT5_phi();
  const vector<float> &t4_betaIn();
  const vector<int> &tc_isFake();
  const vector<float> &t3_zOut();
  const vector<float> &t5_outerRadiusMax();
  const vector<int> &pT3_isFake();
  const vector<vector<int> > &sim_pLS_types();
  const vector<float> &t3_deltaBeta();
  const vector<float> &sim_pca_dxy();
  const vector<float> &t5_outerRadiusMin();
  const vector<float> &pT4_phi();
  const vector<float> &t3_rtLo();
  const vector<float> &t3_betaOutCut();
  const vector<int> &pT5_isDuplicate();
  const vector<float> &pT4_zHi();
  const vector<int> &t5_moduleType_binary();
  const vector<float> &t3_residual();
  const vector<int> &t3_occupancies();
  const vector<vector<int> > &sim_pT4_types();
  const vector<float> &t4_deltaBetaCut();
  const vector<float> &t5_pt();
  const vector<float> &sim_len();
  const vector<float> &sim_lengap();
  const vector<float> &sim_hits();
  const vector<float> &simvtx_x();
  const vector<float> &simvtx_y();
  const vector<float> &simvtx_z();
  const vector<int> &sim_T4_matched();
  const vector<float> &t4_rtOut();
  const vector<float> &pT3_pt();
  const vector<float> &tc_pt();
  const vector<float> &pT3_pixelRadiusError();
  const vector<int> &pT5_isFake();
  const vector<float> &pT5_pt();
  const vector<float> &pT4_deltaBeta();
  const vector<float> &t5_innerRadiusMax();
  const vector<float> &sim_phi();
  const vector<float> &t4_betaInCut();
  const vector<float> &t5_innerRadiusMin();
  const vector<float> &pT4_sdlCut();
  const vector<int> &pT3_hit_idx3();
  const vector<float> &pT4_zHiPointed();
  const vector<int> &pT3_hit_idx1();
  const vector<float> &sim_pca_dz();
  const vector<float> &t4_deltaBeta();
  const vector<int> &pT3_hit_idx5();
  const vector<int> &pT3_hit_idx4();
  const vector<int> &pT5_layer_binary();
  const vector<float> &t5_bridgeRadius();
  const vector<int> &sim_pLS_matched();
  const vector<int> &pT4_isFake();
  const vector<int> &sim_T3_matched();
  const vector<float> &t3_deltaPhiPos();
  const vector<float> &pT3_phi();
  const vector<vector<float> > &t5_matched_pt();
  const vector<float> &pT3_eta();
  const vector<float> &t4_eta();
  const vector<float> &t3_deltaPhi();
  const vector<int> &pLS_isFake();
  const vector<float> &pT4_betaIn();
  const vector<int> &sim_bunchCrossing();
  const vector<float> &pT4_zOut();
  const vector<float> &pT4_deltaPhiPos();
  const vector<int> &sim_parentVtxIdx();
  const vector<float> &t3_zHi();
  const vector<int> &sim_pT4_matched();
  const vector<float> &t5_innerRadiusMin2S();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<int> &sim_T5_matched();
  const vector<vector<int> > &sim_T5_types();
  const vector<int> &t5_isDuplicate();
  const vector<float> &t4_zHiPointed();
  const vector<float> &pT4_rtHi();
  const vector<float> &t5_outerRadiusMin2S();
  const vector<float> &t3_betaIn();
  const int &pT3_occupancies();
  const int &tc_occupancies();
  const vector<float> &t5_innerRadius();
  const vector<int> &sim_TC_matched();
  const vector<int> &pLS_isDuplicate();
  const vector<int> &t5_occupancies();
  const vector<int> &t3_layer1();
  const vector<float> &pT4_kZ();
  const vector<int> &pT3_hit_idx2();
  const vector<float> &pLS_pt();
  const vector<vector<int> > &sim_T4_types();
  const vector<int> &pT4_isDuplicate();
  const vector<float> &t4_pt();
  const vector<float> &t4_zHi();
  const vector<vector<int> > &sim_TC_types();
  const vector<float> &t3_kZ();
  const vector<int> &t4_moduleType_binary();
  const vector<int> &sg_occupancies();
  const vector<float> &pT4_pt();
  const vector<int> &pT3_hit_idx6();
  const vector<int> &pT3_pix_idx4();
  const vector<float> &sim_vx();
  const vector<float> &sim_vy();
  const vector<float> &sim_vz();
  const vector<float> &t4_sdlCut();
  const vector<float> &pT4_rtLo();
  const vector<float> &t5_innerRadiusMax2S();
  const vector<float> &t3_pt();
  const vector<int> &module_rings();
  const vector<float> &t3_zLo();
  const vector<float> &pT4_deltaBetaCut();
  const vector<float> &t4_rtHi();
  const vector<int> &t3_layer2();
  const vector<vector<int> > &sim_T3_types();
  const vector<vector<int> > &sim_pT5_types();
  const vector<int> &sim_pT5_matched();
  const vector<int> &module_layers();
  const vector<float> &pT4_eta();
  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern SDL sdl;
#endif

namespace tas {

  const int &pT5_occupancies();
  const vector<float> &t3_phi();
  const vector<float> &t4_zLoPointed();
  const vector<float> &t4_kZ();
  const vector<int> &t3_isDuplicate();
  const vector<int> &sim_event();
  const vector<float> &t4_zOut();
  const vector<int> &sim_q();
  const vector<float> &t3_rtHi();
  const vector<float> &sim_eta();
  const vector<float> &pT4_betaOut();
  const vector<float> &pT4_zLo();
  const vector<float> &t5_eta();
  const vector<int> &sim_denom();
  const vector<float> &pLS_phi();
  const vector<int> &t3_layer3();
  const vector<int> &pT3_isDuplicate();
  const vector<int> &tc_isDuplicate();
  const vector<float> &t4_deltaPhiPos();
  const vector<float> &pT5_rzChiSquared();
  const vector<float> &pT5_eta();
  const vector<int> &sim_pT3_matched();
  const vector<vector<float> > &pT3_matched_pt();
  const vector<float> &t3_zHiPointed();
  const vector<float> &t4_betaOut();
  const vector<int> &t4_isDuplicate();
  const vector<float> &t4_betaOutCut();
  const vector<float> &t3_betaOut();
  const vector<float> &t3_sdlCut();
  const vector<float> &pT4_rtOut();
  const vector<float> &t3_betaInCut();
  const vector<float> &pT4_betaOutCut();
  const vector<float> &pT4_betaInCut();
  const vector<float> &pT3_pixelRadius();
  const vector<float> &sim_pt();
  const vector<float> &pT5_matched_pt();
  const vector<float> &pT4_deltaPhi();
  const vector<float> &t3_zLoPointed();
  const vector<float> &pLS_eta();
  const vector<float> &t3_deltaBetaCut();
  const vector<int> &t3_moduleType_binary();
  const vector<int> &sim_pdgId();
  const vector<float> &t3_eta();
  const vector<float> &t5_bridgeRadiusMax2S();
  const vector<float> &t5_outerRadiusMax2S();
  const vector<int> &t4_occupancies();
  const vector<int> &t5_layer_binary();
  const vector<vector<int> > &sim_tcIdx();
  const vector<int> &pT4_layer_binary();
  const vector<int> &pT3_layer_binary();
  const vector<int> &pT3_pix_idx3();
  const vector<int> &pT3_pix_idx2();
  const vector<int> &pT3_pix_idx1();
  const vector<float> &t5_bridgeRadiusMax();
  const vector<float> &t5_bridgeRadiusMin2S();
  const vector<int> &module_subdets();
  const vector<float> &pT3_tripletRadius();
  const vector<float> &pT4_zLoPointed();
  const vector<int> &t3_hit_idx4();
  const vector<int> &t3_hit_idx5();
  const vector<int> &t3_hit_idx6();
  const vector<float> &t3_rtOut();
  const vector<int> &t3_hit_idx1();
  const vector<int> &t3_hit_idx2();
  const vector<int> &t3_hit_idx3();
  const vector<int> &t3_isFake();
  const vector<int> &t5_isFake();
  const vector<float> &t5_bridgeRadiusMin();
  const vector<float> &t4_zLo();
  const vector<int> &md_occupancies();
  const vector<int> &t3_layer_binary();
  const vector<int> &t4_layer_binary();
  const vector<vector<int> > &sim_pT3_types();
  const vector<float> &t4_phi();
  const vector<float> &t5_phi();
  const vector<int> &t4_isFake();
  const vector<float> &t4_deltaPhi();
  const vector<float> &t4_rtLo();
  const vector<float> &t5_outerRadius();
  const vector<float> &pT5_phi();
  const vector<float> &t4_betaIn();
  const vector<int> &tc_isFake();
  const vector<float> &t3_zOut();
  const vector<float> &t5_outerRadiusMax();
  const vector<int> &pT3_isFake();
  const vector<vector<int> > &sim_pLS_types();
  const vector<float> &t3_deltaBeta();
  const vector<float> &sim_pca_dxy();
  const vector<float> &t5_outerRadiusMin();
  const vector<float> &pT4_phi();
  const vector<float> &t3_rtLo();
  const vector<float> &t3_betaOutCut();
  const vector<int> &pT5_isDuplicate();
  const vector<float> &pT4_zHi();
  const vector<int> &t5_moduleType_binary();
  const vector<float> &t3_residual();
  const vector<int> &t3_occupancies();
  const vector<vector<int> > &sim_pT4_types();
  const vector<float> &t4_deltaBetaCut();
  const vector<float> &t5_pt();
  const vector<float> &sim_len();
  const vector<float> &sim_lengap();
  const vector<float> &sim_hits();
  const vector<float> &simvtx_x();
  const vector<float> &simvtx_y();
  const vector<float> &simvtx_z();
  const vector<int> &sim_T4_matched();
  const vector<float> &t4_rtOut();
  const vector<float> &pT3_pt();
  const vector<float> &tc_pt();
  const vector<float> &pT3_pixelRadiusError();
  const vector<int> &pT5_isFake();
  const vector<float> &pT5_pt();
  const vector<float> &pT4_deltaBeta();
  const vector<float> &t5_innerRadiusMax();
  const vector<float> &sim_phi();
  const vector<float> &t4_betaInCut();
  const vector<float> &t5_innerRadiusMin();
  const vector<float> &pT4_sdlCut();
  const vector<int> &pT3_hit_idx3();
  const vector<float> &pT4_zHiPointed();
  const vector<int> &pT3_hit_idx1();
  const vector<float> &sim_pca_dz();
  const vector<float> &t4_deltaBeta();
  const vector<int> &pT3_hit_idx5();
  const vector<int> &pT3_hit_idx4();
  const vector<int> &pT5_layer_binary();
  const vector<float> &t5_bridgeRadius();
  const vector<int> &sim_pLS_matched();
  const vector<int> &pT4_isFake();
  const vector<int> &sim_T3_matched();
  const vector<float> &t3_deltaPhiPos();
  const vector<float> &pT3_phi();
  const vector<vector<float> > &t5_matched_pt();
  const vector<float> &pT3_eta();
  const vector<float> &t4_eta();
  const vector<float> &t3_deltaPhi();
  const vector<int> &pLS_isFake();
  const vector<float> &pT4_betaIn();
  const vector<int> &sim_bunchCrossing();
  const vector<float> &pT4_zOut();
  const vector<float> &pT4_deltaPhiPos();
  const vector<int> &sim_parentVtxIdx();
  const vector<float> &t3_zHi();
  const vector<int> &sim_pT4_matched();
  const vector<float> &t5_innerRadiusMin2S();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<int> &sim_T5_matched();
  const vector<vector<int> > &sim_T5_types();
  const vector<int> &t5_isDuplicate();
  const vector<float> &t4_zHiPointed();
  const vector<float> &pT4_rtHi();
  const vector<float> &t5_outerRadiusMin2S();
  const vector<float> &t3_betaIn();
  const int &pT3_occupancies();
  const int &tc_occupancies();
  const vector<float> &t5_innerRadius();
  const vector<int> &sim_TC_matched();
  const vector<int> &pLS_isDuplicate();
  const vector<int> &t5_occupancies();
  const vector<int> &t3_layer1();
  const vector<float> &pT4_kZ();
  const vector<int> &pT3_hit_idx2();
  const vector<float> &pLS_pt();
  const vector<vector<int> > &sim_T4_types();
  const vector<int> &pT4_isDuplicate();
  const vector<float> &t4_pt();
  const vector<float> &t4_zHi();
  const vector<vector<int> > &sim_TC_types();
  const vector<float> &t3_kZ();
  const vector<int> &t4_moduleType_binary();
  const vector<int> &sg_occupancies();
  const vector<float> &pT4_pt();
  const vector<int> &pT3_hit_idx6();
  const vector<int> &pT3_pix_idx4();
  const vector<float> &sim_vx();
  const vector<float> &sim_vy();
  const vector<float> &sim_vz();
  const vector<float> &t4_sdlCut();
  const vector<float> &pT4_rtLo();
  const vector<float> &t5_innerRadiusMax2S();
  const vector<float> &t3_pt();
  const vector<int> &module_rings();
  const vector<float> &t3_zLo();
  const vector<float> &pT4_deltaBetaCut();
  const vector<float> &t4_rtHi();
  const vector<int> &t3_layer2();
  const vector<vector<int> > &sim_T3_types();
  const vector<vector<int> > &sim_pT5_types();
  const vector<int> &sim_pT5_matched();
  const vector<int> &module_layers();
  const vector<float> &pT4_eta();
}
#endif
